// SPDX-License-Identifier: NONE
pragma solidity ^0.8.0;

// @dev Edge case for addLiquidity taken from "sync exploit in Uniswap V2"
//  https://twitter.com/charleswangp/status/1787254203364098323?s=46

// Test Helpers, Mock Tokens
import "forge-std/Test.sol";

// Pair factory and Pair
import {LatamswapFactory} from "src/Factory.sol";
import {LatamswapRouter} from "src/Router.sol";
import {PairV2} from "src/PairV2.sol";
import {MockToken} from "./MockToken.sol";
import {WETH} from "solady/tokens/WETH.sol";
import {Nativo} from "lib/Nativo/src/Nativo.sol";

contract SyncExploitTest is Test {
    // Pair factory and Pair
    LatamswapFactory factory;
    LatamswapRouter router;
    MockToken tokenMock;
    WETH weth;

    address deployer = makeAddr("deployer");

    function setUp() public {
        address nativo = address(new Nativo("Nativo", "NETH", makeAddr("nativoOwner"), makeAddr("nativoOwner")));
        weth = new WETH();

        factory = new LatamswapFactory(deployer, address(weth), nativo);
        router = new LatamswapRouter(address(factory), nativo);
        tokenMock = new MockToken();
    }

    function test_Poc() public {
        deal(address(weth), address(this), 1 ether);
        tokenMock.mint(address(this), 1000 ether);
        tokenMock.approve(address(router), type(uint256).max);
        weth.approve(address(router), type(uint256).max);

        address pair = factory.createPair(address(tokenMock), address(weth));
        weth.transfer(pair, 1);

        vm.expectRevert(bytes4(keccak256("ErrLatamswapInsufficientLiquidity()")));
        PairV2(pair).sync();

        // now user wants to add liquidity with the router
        // the router will call the pair to transfer the tokens
        router.addLiquidity(
            address(tokenMock), address(weth), 0.1 ether, 0.1 ether, 0, 0, address(this), block.timestamp + 1000
        );
    }
}
